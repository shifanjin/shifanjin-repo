# FALSE s
is_integer(2.1)
is_integer(pi)
is_integer(0.01)
#' @title whether or not it is positive
#' @description checks whether or not it is positive
#' @param x any input
#' @return True or False of wether it is positive or not
is_positive <- function(x) {
if (x > 0) {
return(TRUE)
}else {
return(FALSE)
}
}
# TRUE s
is_positive(0.01)
is_positive(2)
# FALSE s
is_positive(-2)
is_positive(0)
is_nonnegative <- function(x) {
if (x < 0) {
return(FALSE)
}else {
return(TRUE)
}
}
# TRUE s
is_nonnegative(0)
is_nonnegative(2)
# FALSE s
is_nonnegative(-0.00001)
is_nonnegative(-2)
is_positive_integer <- function(x) {
if (is_integer(x) & is_positive(x)) {
return(TRUE)
}else {
return(FALSE)
}
}
# TRUE
is_positive_integer(2)
is_positive_integer(2L)
# FALSE
is_positive_integer(0)
is_positive_integer(-2)
# ===================================================================
# Title: binomial-functions.R
# Description:
#   This script is basically writing functions for the binomial
#   probability function in different forms.
# Author: Shi Fan Jin
# Date: 3-20-2018
# ===================================================================
#' @title whether or not it is an integer
#' @description checks whether or not it is an integer
#' @param x any input
#' @return True or False of wether it is an interger or not
is_integer <- function(x) {
if (x %% 1 != 0) {
return(FALSE)
}else {
return(TRUE)
}
}
# TRUE s
is_integer(-1)
is_integer(0)
is_integer(2L)
is_integer(2)
# FALSE s
is_integer(2.1)
is_integer(pi)
is_integer(0.01)
#' @title whether or not it is positive
#' @description checks whether or not it is positive
#' @param x any input
#' @return True or False of wether it is positive or not
is_positive <- function(x) {
if (x > 0) {
return(TRUE)
}else {
return(FALSE)
}
}
# TRUE s
is_positive(0.01)
is_positive(2)
# FALSE s
is_positive(-2)
is_positive(0)
#' @title whether or not it is nonnegative
#' @description checks whether or not it is nonnegative
#' @param x any input
#' @return True or False of wether it is nonnegative or not
is_nonnegative <- function(x) {
if (x < 0) {
return(FALSE)
}else {
return(TRUE)
}
}
# TRUE s
is_nonnegative(0)
is_nonnegative(2)
# FALSE s
is_nonnegative(-0.00001)
is_nonnegative(-2)
is_positive_integer <- function(x) {
if (is_integer(x) & is_positive(x)) {
return(TRUE)
}else {
return(FALSE)
}
}
# TRUE
is_positive_integer(2)
is_positive_integer(2L)
# FALSE
is_positive_integer(0)
is_positive_integer(-2)
# TRUE
is_positive_integer(2)
is_positive_integer(2L)
# FALSE
is_positive_integer(0)
is_positive_integer(-2)
#' @title whether or not it is a nonnegative integer
#' @description checks whether or not it is a nonnegative integer
#' @param x any input
#' @return True or False of whether it is a nonnegative integer or not
is_nonneg_integer <- function(x) {
if (is_integer(x) & is_nonnegative(x)) {
return(TRUE)
}else {
return(FALSE)
}
}
# TRUE s
is_nonneg_integer(0)
is_nonneg_integer(1)
# FALSE
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
#' @title whether or not it is a probability
#' @description checks whether or not it is a probability
#' @param p the input probability
#' @return True or False of whether it is a probability or not
is_probability <- function(p) {
if (p >= 0 & p <= 1) {
return(TRUE)
}else {
return(FALSE)
}
}
# TRUE s
is_probability(0)
is_probability(0.5)
is_probability(1)
# FALSE s
is_probability(-1)
is_probability(1.0000001)
#' @title whether or not it is a probability
#' @description checks whether or not it is a probability
#' @param p the input probability
#' @return True or False of whether it is a probability or not
bin_factorial <- function(n) {
if (n == 0) {
return(1)
}else {
fact = n
for (i in 1:n-1) {
fact = fact * (n - i)
}
}
}
bin_factorial(5)
bin_factorial(0)
#' @title whether or not it is a probability
#' @description checks whether or not it is a probability
#' @param p the input probability
#' @return True or False of whether it is a probability or not
bin_factorial <- function(n) {
if (n == 0) {
return(1)
}else {
fact = n
for (i in 1:n-1) {
fact = fact * (n - i)
}
return(fact)
}
}
bin_factorial(5)
bin_factorial(0)
bin_factorial <- function(n) {
if (n == 0) {
return(1)
}else {
fact = n
for (i in 1:n-1) {
fact = fact * (n - i)
}
return(fact)
}
}
bin_factorial(5)
bin_factorial(2)
bin_factorial(2)
bin_factorial(5)
bin_factorial(0)
#' @return True or False of whether it is a probability or not
bin_factorial <- function(n) {
if (n == 0) {
return(1)
}else {
fact = 1
for (i in 1:n) {
fact = fact * i
}
return(fact)
}
}
bin_factorial(2)
bin_factorial(5)
bin_factorial(0)
bin_factorial(3)
bin_combinations <- function(n, k) {
n = bin_factorial(n)
d = bin_factorial(k) * bin_factorial(n - k)
comb = n / d
}
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
bin_combinations(n = 5, k = 2)
bin_combinations <- function(n, k) {
n = bin_factorial(n)
d = bin_factorial(k) * bin_factorial(n - k)
return(n/d)
}
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
bin_factorial(n)
bin_factorial(5)
bin_factorial(6)
bin_combinations <- function(n, k) {
nu = bin_factorial(n)
de = bin_factorial(k) * bin_factorial(n - k)
return(nu/de)
}
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
bin_probability <- function(trials, success, prob) {
if(!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Both trials and success should be non-negative integer.")
}
if(!is_probability(prob)) {
stop("A valid probability should be in the range of 0 <= p <= 1.")
}
comb = bin_combinations(trials, success)
one_prob = (prob ^ success) * ((1 - prob) ^ (trials - success))
}
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_probability <- function(trials, success, prob) {
if(!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Both trials and success should be non-negative integer.")
}
if(!is_probability(prob)) {
stop("A valid probability should be in the range of 0 <= p <= 1.")
}
comb = bin_combinations(trials, success)
one_prob = (prob ^ success) * ((1 - prob) ^ (trials - success))
return(comb * one_prob)
}
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(trials = 5, success = 2, prob = 0.5)
#' @title probability of binomial
#' @description calculates the probability of binomial
#' @param trials the total trials
#' @param success the number of successes
#' @param prob the probability of a success
#' @return the probability of success in trials
bin_probability <- function(trials, success, prob) {
if(!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Both trials and success should be non-negative integer.")
}
if(!is_probability(prob)) {
stop("A valid probability should be in the range of 0 <= p <= 1.")
}
comb = bin_combinations(trials, success)
one_prob = (prob ^ success) * ((1 - prob) ^ (trials - success))
return(comb * one_prob)
}
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_probability(trials = 5, success = 2, prob = -1)
bin_probability(trials = 0, success = 2, prob = 0.5)
bin_probability(trials = -8, success = 2, prob = 0.5)
bin_probability(trials = 5, success = -9, prob = 0.5)
data.frame()
?data.frame
> n = c(2, 3, 5)
> s = c("aa", "bb", "cc")
> b = c(TRUE, FALSE, TRUE)
> df = data.frame(n, s, b)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
View(df)
bin_distribution <- function(trials, prob) {
success = c(0:trials)
prob_list = c()
for (i in length(success)) {
prob_list[i] = bin_probability(trials, success[i], prob)
}
dat <- data.frame(success, prob_list)
return(dat)
}
bin_distribution <- function(trials, prob) {
success = c(0:trials)
prob_list = c()
for (i in length(success)) {
prob_list[i] = bin_probability(trials, success[i], prob)
}
dat <- data.frame(success, prob_list)
return(dat)
}
# binomial probability distribution
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob) {
success = c(0:trials)
probability = c()
for (i in 1: length(success)) {
probability[i] = bin_probability(trials, success[i], prob)
}
dat <- data.frame(success, probability)
return(dat)
}
# binomial probability distribution
bin_distribution(trials = 5, prob = 0.5)
#' @title table of binomial distribution
#' @description calculates the distribution table
#' @param trials the total trials
#' @param prob the probability of a success
#' @return a distribution table
bin_distribution <- function(trials, prob) {
success = c(0:trials)
probability = c()
for (i in 1: length(success)) {
probability[i] = bin_probability(trials, success[i], prob)
}
dat <- data.frame(success, probability)
return(dat)
}
# binomial probability distribution
bin_distribution(trials = 5, prob = 0.5)
?source
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
dat <- read.csv('nba2017-roster.csv')
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, 0.25)
bin_distribution(10, 0.25)
total_prob = 0
for(i in 3:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob = 0
for(i in 3:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
bin_distribution(15, 0.35)
bin_distribution(15, 0.35)
hist(bin_distribution(15, 0.35))
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
bin_distribution(15, 0.35)
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability))
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_histogram()
table = bin_distribution(15, 0.35)
ggplot(table) +
geom_histogram()
table = bin_distribution(15, 0.35)
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, 0.25)
total_prob = 0
for(i in 3:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, 0.25)
total_prob = 0
for(i in 3:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, 0.25)
total_prob = 0
for(i in 3:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_point()
View(dat)
ggplot(bin_distribution(10, 0.25)) +
geom_point()
bin_distribution(10, 0.25)
ggplot(bin_distribution(10, 0.25), aes(x = success, y = probability)) +
geom_point()
total_prob = 0
for(i in 4:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = "images/")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = "images/")
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
source("code/binomial-functions.R")
bin_probability(10,3,1/6)
dat <- bin_distribution(10,0.25)
dat
ggplot(dat, aes(x = success, y = probability)) +
geom_point()
total_prob = 0
for (i in 4:trials){
total_prob = total_prob + bin_probability(5,i,0.35)
}
total_prob
dat <- bin_distribution(15,0.35)
dat
ggplot(dat, aes(x = success, y = probability)) +
geom_point()
bin_distribution(10, 0.25)
ggplot(bin_distribution(10, 0.25), aes(x = success, y = probability)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, 0.25)
ggplot(bin_distribution(10, 0.25), aes(x = success, y = probability)) +
geom_point()
total_prob = 0
for(i in 4:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = '~/Desktop/shifanjin-repo/hw03/images/')
dat <- read.csv('nba2017-roster.csv')
library(ggplot2)
source("~/Desktop/shifanjin-repo/hw03/code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, 0.25)
ggplot(bin_distribution(10, 0.25), aes(x = success, y = probability)) +
geom_point()
total_prob = 0
for(i in 4:5){
total_prob = total_prob + bin_probability(5, i, 0.35)
}
total_prob
table = bin_distribution(15, 0.35)
ggplot(table, aes(x = success, y = probability)) +
geom_point()
