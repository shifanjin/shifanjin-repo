'real',
'real',
'character',
'character',
'character',
'character',
'character',
'character',
'character',
'real',
'real',
'real',
'real',
'integer',
'character',
'character',
'integer',
'character',
'real',
'real',
'real',
'integer',
'integer',
'integer',
'integer',
'integer'
)
object.size(imports85)  # 43344 bytes
imports85 <- read.csv('imports-85.data', sep = ',', col.names = col_names, colClasses = col_types, stringsAsFactors = FALSE, na = '?', header = FALSE)
object.size(imports85) # 43136 bytes
str(imports85_csv)
imports85_csv <- read_csv('imports-85.data', na = '?', col_names = col_names,
col_types = cols(
symboling = col_double(),
normalized_losses = col_double(),
make = col_character(),
fuel_type = col_character(),
aspiration = col_character(),
num_of_doors = col_character(),
body_style = col_character(),
drive_wheels = col_character(),
engine_location = col_character(),
wheel_base = col_double(),
length = col_double(),
width = col_double(),
height = col_double(),
curb_weight = col_integer(),
engine_type = col_character(),
num_of_cylinders = col_character(),
engine_size = col_integer(),
fuel_system = col_character(),
bore = col_double(),
stroke = col_double(),
compression_ratio = col_double(),
horsepower = col_integer(),
peak_rpm = col_integer(),
city_mpg = col_integer(),
highway_mpg = col_integer(),
price = col_integer()
)
)
str(imports85_csv)
imports85 <- read.csv('imports-85.data', header = FALSE)
str(imports85) # ? becomes col type 'Factor'
object.size(imports85)  # 43344 bytes
col_names <- c(
'symboling',
'normalized_losses',
'make',
'fuel_type',
'aspiration',
'num_of_doors',
'body_style',
'drive_wheels',
'engine_location',
'wheel_base',
'length',
'width',
'height',
'curb_weight',
'engine_type',
'num_of_cylinders',
'engine_size',
'fuel_system',
'bore',
'stroke',
'compression_ratio',
'horsepower',
'peak_rpm',
'city_mpg',
'highway_mpg',
'price'
)
col_types <- c(
'real',
'real',
'character',
'character',
'character',
'character',
'character',
'character',
'character',
'real',
'real',
'real',
'real',
'integer',
'character',
'character',
'integer',
'character',
'real',
'real',
'real',
'integer',
'integer',
'integer',
'integer',
'integer'
)
imports85 <- read.csv('imports-85.data', sep = ',', col.names = col_names, colClasses = col_types, stringsAsFactors = FALSE, na = '?', header = FALSE)
View(imports85)
View(imports85)
str(imports85)
object.size(imports85) # 43136 bytes
# with sorting in decreasing order
head(sort(table(imports85[which(imports85$fuel_type == 'diesel'), ]$make), decreasing = TRUE),1)
head(eigen_percentage_table, 3)
head(eigen_percentage_table, 3)
eigen_percentage_table[:4]
eigen_percentage_table <- cbind(eigenvalues, percentage, cumulative.percentage)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(corrplot)
imports85 <- read.csv('imports-85.data', sep = ',')
imports85 <- read.csv('imports-85.data', header = FALSE)
imports85_matrix <- as.matrix(read.csv('imports-85.data', sep = ','))
str(imports85_matrix)
col_names <- c(
'symboling',
'normalized_losses',
'make',
'fuel_type',
'aspiration',
'num_of_doors',
'body_style',
'drive_wheels',
'engine_location',
'wheel_base',
'length',
'width',
'height',
'curb_weight',
'engine_type',
'num_of_cylinders',
'engine_size',
'fuel_system',
'bore',
'stroke',
'compression_ratio',
'horsepower',
'peak_rpm',
'city_mpg',
'highway_mpg',
'price'
)
col_types <- c(
'real',
'real',
'character',
'character',
'character',
'character',
'character',
'character',
'character',
'real',
'real',
'real',
'real',
'integer',
'character',
'character',
'integer',
'character',
'real',
'real',
'real',
'integer',
'integer',
'integer',
'integer',
'integer'
)
# Before giving col.names and colClasses:
str(imports85) # ? becomes col type 'Factor'
object.size(imports85)  # 43344 bytes
imports85 <- read.csv('imports-85.data', sep = ',', col.names = col_names, colClasses = col_types, stringsAsFactors = FALSE, na = '?', header = FALSE)
str(imports85)
object.size(imports85) # 43136 bytes
imports85_csv <- read_csv('imports-85.data', na = '?', col_names = col_names,
col_types = cols(
symboling = col_double(),
normalized_losses = col_double(),
make = col_character(),
fuel_type = col_character(),
aspiration = col_character(),
num_of_doors = col_character(),
body_style = col_character(),
drive_wheels = col_character(),
engine_location = col_character(),
wheel_base = col_double(),
length = col_double(),
width = col_double(),
height = col_double(),
curb_weight = col_integer(),
engine_type = col_character(),
num_of_cylinders = col_character(),
engine_size = col_integer(),
fuel_system = col_character(),
bore = col_double(),
stroke = col_double(),
compression_ratio = col_double(),
horsepower = col_integer(),
peak_rpm = col_integer(),
city_mpg = col_integer(),
highway_mpg = col_integer(),
price = col_integer()
)
)
str(imports85_csv)
hist(imports85$price, breaks = 100, col = rgb(0,0,1,.3), xlab="Price", main = "The Histogram of price with colored bars")
boxplot(imports85$horsepower, main = "Boxplot of Horsepower in Horizontal Orientation", xlab = "Horsepower", horizontal = TRUE, na.action = NULL)
body_style_vect <- imports85$body_style
table_body <- sort(table(imports85$body_style), decreasing = TRUE) # the frequencies of each body_style
barplot(table_body, main = "Barplot of the frequencies of body_style (decreasing order)", beside = TRUE, xlab = "Body Style", ylab = "frequencies", names.arg = c("hardtop", "wagon", "sedan", "hatchback", "convertible"), horiz = FALSE, ylim = c(0, 100))
im85_turbo <- subset(imports85, aspiration == 'turbo', select = c('wheel_base', 'length', 'width', 'height', 'price'))
stars(im85_turbo, main = "stars() plot of vehicles with turbo aspiration")
# 1st way (by subset())
gas_cars <- subset(imports85, fuel_type == 'gas', select = 'price')
gas_lou <- imports85[imports85$fuel_type == 'gas', ]$price
mean(gas_cars$price, na.rm = TRUE )
mean(gas_lou, na.rm = TRUE)
# 2nd way (by which())
# fuel_type gas cars
mean(imports85[which(imports85$fuel_type == 'gas'), ]$price, na.rm = TRUE)
# fuel_type diesel cars
mean(imports85[which(imports85$fuel_type == 'diesel'), ]$price, na.rm = TRUE)
imports85[which(imports85$num_of_cylinders == 'twelve'), ]$make
# with sorting in decreasing order
head(sort(table(imports85[which(imports85$fuel_type == 'diesel'), ]$make), decreasing = TRUE),1)
max(imports85$horsepower, na.rm = TRUE)
imports85[which.max(imports85$horsepower), ]
imports85[which.max(imports85$horsepower), ]$price
#aggregate(price ~horsepower, imports85, max)
city <- imports85$city_mpg
#hist(city)
quantile(city, probs = 0.10)
#hist(imports85$highway_mpg)
quantile(imports85$highway_mpg, probs = 0.9)
bottom_10_price <- imports85[which(imports85$city_mpg <= quantile(imports85$city_mpg, probs = 0.1)), ]$price
median(bottom_10_price, na.rm = TRUE)
list <- as.list(imports85)
back <- data.frame(list)
pre_qdat <- subset(imports85, select = c('wheel_base',
'length',
'width',
'height',
'curb_weight',
'engine_size',
'bore',
'stroke',
'compression_ratio',
'horsepower',
'peak_rpm',
'city_mpg',
'highway_mpg',
'price'
)
)
qdat <- na.omit(pre_qdat)
M <- round(cor(qdat), 2)
M # the matrix of correlations
corrplot(M, method = "circle")
corrplot(M, method = "pie")
pca_prcomp <- prcomp(qdat, scale. = TRUE)
names(pca_prcomp)
eigenvalues <- pca_prcomp$sdev ^ 2
eigenvalues
barplot(eigenvalues, main = "Barplot for eigenvalues", names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "PC11", "PC12", "PC13", "PC14"))
cumulative.percentage = cumsum(eigenvalues) / sum(eigenvalues)
percentage = eigenvalues / sum(eigenvalues)
eigen_percentage_table <- cbind(eigenvalues, percentage, cumulative.percentage)
eigen_percentage_table
plot(pca_prcomp$sdev, pca_prcomp$center, main = "PC Plot of PC1 and PC2", xlab = "sdev (PC1)", ylab = "center (PC2)")
biplot(pca_prcomp, scale = 0)
eigen_percentage_table
eigen_percentage_table[1:3,]
plot(pca_prcomp$sdev, pca_prcomp$center, main = "PC Plot of PC1 and PC2", xlab = "sdev (PC1)", ylab = "center (PC2)")
pca_prcomp
pca_prcomp$x
biplot(pca_prcomp, scale = 0)
loading <- pca_prcomp$rotation
View(loading)
first_loading <- loading[1]
second_loading <- loading[2]
View(loading)
class(loading)
first_loading <- loading[1]
first_loading
loading <- pca_prcomp$rotation
first_loading <- as.matrix(qdat) %*% as.data.frame(loading)$PC1
second_loading <- as.matrix(qdat) %*% as.data.frame(loading)$PC2
first_loading
plot(first_loading, second_loading)
load_1 <- as.data.frame(loading)$PC1
load_2 <- as.data.frame(loading)$PC2
plot(load_1, load_2)
imports85$fuel_type
imports85[, 1]
imports85[[1]]
imports85[, symboling]
imports85[["symboling"]]
imports85$"symboling"
imports85[, "symboling"]
max(imports85$horsepower, na.rm = TRUE)
imports85[which.max(imports85$horsepower), ]
imports85[which.max(imports85$horsepower), ]$price
str(as.matrix(imports85))
tyr <- as.matrix(imports85)
View(tyr)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(corrplot)
plot(load_1, load_2)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(corrplot)
imports85 <- read.csv('imports-85.data', sep = ',')
imports85 <- read.csv('imports-85.data', header = FALSE)
imports85_matrix <- as.matrix(read.csv('imports-85.data', sep = ','))
str(imports85_matrix)
col_names <- c(
'symboling',
'normalized_losses',
'make',
'fuel_type',
'aspiration',
'num_of_doors',
'body_style',
'drive_wheels',
'engine_location',
'wheel_base',
'length',
'width',
'height',
'curb_weight',
'engine_type',
'num_of_cylinders',
'engine_size',
'fuel_system',
'bore',
'stroke',
'compression_ratio',
'horsepower',
'peak_rpm',
'city_mpg',
'highway_mpg',
'price'
)
col_types <- c(
'real',
'real',
'character',
'character',
'character',
'character',
'character',
'character',
'character',
'real',
'real',
'real',
'real',
'integer',
'character',
'character',
'integer',
'character',
'real',
'real',
'real',
'integer',
'integer',
'integer',
'integer',
'integer'
)
# Before giving col.names and colClasses:
str(imports85) # ? becomes col type 'Factor'
object.size(imports85)  # 43344 bytes
imports85 <- read.csv('imports-85.data', sep = ',', col.names = col_names, colClasses = col_types, stringsAsFactors = FALSE, na = '?', header = FALSE)
str(imports85)
object.size(imports85) # 43136 bytes
imports85_csv <- read_csv('imports-85.data', na = '?', col_names = col_names,
col_types = cols(
symboling = col_double(),
normalized_losses = col_double(),
make = col_character(),
fuel_type = col_character(),
aspiration = col_character(),
num_of_doors = col_character(),
body_style = col_character(),
drive_wheels = col_character(),
engine_location = col_character(),
wheel_base = col_double(),
length = col_double(),
width = col_double(),
height = col_double(),
curb_weight = col_integer(),
engine_type = col_character(),
num_of_cylinders = col_character(),
engine_size = col_integer(),
fuel_system = col_character(),
bore = col_double(),
stroke = col_double(),
compression_ratio = col_double(),
horsepower = col_integer(),
peak_rpm = col_integer(),
city_mpg = col_integer(),
highway_mpg = col_integer(),
price = col_integer()
)
)
str(imports85_csv)
hist(imports85$price, breaks = 100, col = rgb(0,0,1,.3), xlab="Price", main = "The Histogram of price with colored bars")
boxplot(imports85$horsepower, main = "Boxplot of Horsepower in Horizontal Orientation", xlab = "Horsepower", horizontal = TRUE, na.action = NULL)
body_style_vect <- imports85$body_style
table_body <- sort(table(imports85$body_style), decreasing = TRUE) # the frequencies of each body_style
barplot(table_body, main = "Barplot of the frequencies of body_style (decreasing order)", beside = TRUE, xlab = "Body Style", ylab = "frequencies", names.arg = c("hardtop", "wagon", "sedan", "hatchback", "convertible"), horiz = FALSE, ylim = c(0, 100))
im85_turbo <- subset(imports85, aspiration == 'turbo', select = c('wheel_base', 'length', 'width', 'height', 'price'))
stars(im85_turbo, main = "stars() plot of vehicles with turbo aspiration")
# 1st way (by subset())
gas_cars <- subset(imports85, fuel_type == 'gas', select = 'price')
gas_lou <- imports85[imports85$fuel_type == 'gas', ]$price
mean(gas_cars$price, na.rm = TRUE )
mean(gas_lou, na.rm = TRUE)
# 2nd way (by which())
# fuel_type gas cars
mean(imports85[which(imports85$fuel_type == 'gas'), ]$price, na.rm = TRUE)
# fuel_type diesel cars
mean(imports85[which(imports85$fuel_type == 'diesel'), ]$price, na.rm = TRUE)
imports85[which(imports85$num_of_cylinders == 'twelve'), ]$make
# with sorting in decreasing order
head(sort(table(imports85[which(imports85$fuel_type == 'diesel'), ]$make), decreasing = TRUE),1)
max(imports85$horsepower, na.rm = TRUE)
imports85[which.max(imports85$horsepower), ]
imports85[which.max(imports85$horsepower), ]$price
city <- imports85$city_mpg
#hist(city)
quantile(city, probs = 0.10)
#hist(imports85$highway_mpg)
quantile(imports85$highway_mpg, probs = 0.9)
bottom_10_price <- imports85[which(imports85$city_mpg <= quantile(imports85$city_mpg, probs = 0.1)), ]$price
median(bottom_10_price, na.rm = TRUE)
imports85$symboling
imports85[, 1]
imports85[[1]]
imports85[["symboling"]]
imports85$"symboling"
imports85[, "symboling"]
list <- as.list(imports85)
back <- data.frame(list)
pre_qdat <- subset(imports85, select = c('wheel_base',
'length',
'width',
'height',
'curb_weight',
'engine_size',
'bore',
'stroke',
'compression_ratio',
'horsepower',
'peak_rpm',
'city_mpg',
'highway_mpg',
'price'
)
)
qdat <- na.omit(pre_qdat)
M <- round(cor(qdat), 2)
M # the matrix of correlations
corrplot(M, method = "circle")
corrplot(M, method = "pie")
pca_prcomp <- prcomp(qdat, scale. = TRUE)
names(pca_prcomp)
eigenvalues <- pca_prcomp$sdev ^ 2
eigenvalues
barplot(eigenvalues, main = "Barplot for eigenvalues", names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "PC11", "PC12", "PC13", "PC14"))
cumulative.percentage = cumsum(eigenvalues) / sum(eigenvalues)
percentage = eigenvalues / sum(eigenvalues)
eigen_percentage_table <- cbind(eigenvalues, percentage, cumulative.percentage)
eigen_percentage_table[1:3,]
loading <- pca_prcomp$rotation
comp_1 <- as.matrix(qdat) %*% as.data.frame(loading)$PC1
comp_2 <- as.matrix(qdat) %*% as.data.frame(loading)$PC2
plot(comp_1, comp_2)
load_1 <- as.data.frame(loading)$PC1
load_2 <- as.data.frame(loading)$PC2
plot(load_1, load_2)
biplot(pca_prcomp, scale = 0)
